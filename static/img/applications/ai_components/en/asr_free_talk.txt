@startuml
participant input 
database recording

loop
input --> recording: Continuously record and save the collected audio data,\nwrite once every ~10ms
input -> input : Perform VAD detection on the collected audio data,\nreturn whether human voice is detected
end
== No human voice detected ==
loop
cloud_asr --> recording: Only save the most recent 600ms of audio data,\nfor cloud VAD usage
end
== Human voice detected ==
input -> input : Perform local ASR wake word detection on the collected audio data,\nreturn whether the wake word is detected
alt Wake word detected
input -> input : Enter wake-up state
input -> main: Notify that wake word is detected
main -> player: Play prompt sound
end
== 30 seconds after wake word detected, no human voice detected ==
input -> input : Return to wake word detection state
== After wake word detected, human voice detected again ==
loop  Within wake-up timeout, human voice is continuously detected
input -> main: Valid audio data detected
main -> cloud_asr: Start reporting task
cloud_asr -> ai_agent: Start reporting
cloud_asr --> recording: Read audio data
cloud_asr -> ai_agent: Report audio data stream
== End of human voice detected ==
input -> main: Valid audio data collection ended
main -> cloud_asr: End reporting task
cloud_asr--> recording: Read remaining cached audio data
cloud_asr -> ai_agent: Report audio data stream
cloud_asr -> ai_agent: End audio stream reporting
cloud_asr -> cloud_asr: Wait for cloud ASR
ai_agent -> main: Return text after ASR
main -> cloud_asr: ASR result received, reporting state can become idle
== Cloud sends AI reply information ==
ai_agent -> main: Notify text and audio information
main -> player: Play audio data sent from cloud
end
@enduml