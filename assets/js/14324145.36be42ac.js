"use strict";(self.webpackChunktuyaopen_io_website=self.webpackChunktuyaopen_io_website||[]).push([[9983],{28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>r});var o=i(96540);const l={},t=o.createContext(l);function c(e){const n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),o.createElement(t.Provider,{value:n},e.children)}},34203:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>c,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"build-system/compilation-guide","title":"Compilation Guide","description":"Overview","source":"@site/docs/build-system/compilation-guide.md","sourceDirName":"build-system","slug":"/build-system/compilation-guide","permalink":"/docs/build-system/compilation-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/Tuya-Community/TuyaOpen.io/edit/master/docs/build-system/compilation-guide.md","tags":[],"version":"current","frontMatter":{"title":"Compilation Guide"},"sidebar":"docs","previous":{"title":"Introduction to tyutool Tool","permalink":"/docs/tos-tools/tools-tyutool"},"next":{"title":"FAQs","permalink":"/docs/faqs/"}}');var l=i(74848),t=i(28453);const c={title:"Compilation Guide"},r="TuyaOpen Compilation Process Detailed Guide",a={},s=[{value:"Overview",id:"overview",level:2},{value:"Compilation Process Architecture",id:"compilation-process-architecture",level:2},{value:"Process Description",id:"process-description",level:2},{value:"1. Config Command Execution (cli_config.py)",id:"1-config-command-execution-cli_configpy",level:3},{value:"2. Build Command Execution (cli_build.py)",id:"2-build-command-execution-cli_buildpy",level:3},{value:"2.1 Environment Check",id:"21-environment-check",level:4},{value:"2.2 Configuration Initialization",id:"22-configuration-initialization",level:4},{value:"2.3 Platform Download",id:"23-platform-download",level:4},{value:"2.4 Platform Preparation",id:"24-platform-preparation",level:4},{value:"2.5 Build Setup",id:"25-build-setup",level:4},{value:"2.6 CMake Configuration",id:"26-cmake-configuration",level:4},{value:"2.7 Ninja Build",id:"27-ninja-build",level:4},{value:"2.8 Output Validation",id:"28-output-validation",level:4},{value:"3. CMake Build System (CMakeLists.txt)",id:"3-cmake-build-system-cmakeliststxt",level:3},{value:"3.1 Kconfig Configuration System",id:"31-kconfig-configuration-system",level:4},{value:"3.2 Toolchain Configuration",id:"32-toolchain-configuration",level:4},{value:"3.3 Component Compilation",id:"33-component-compilation",level:4},{value:"3.4 Library File Generation",id:"34-library-file-generation",level:4},{value:"3.5 Application Compilation",id:"35-application-compilation",level:4},{value:"3.6 Platform Build",id:"36-platform-build",level:4},{value:"4. Key Files and Directory Structure",id:"4-key-files-and-directory-structure",level:3},{value:"5. Compilation Output",id:"5-compilation-output",level:3},{value:"Summary",id:"summary",level:2},{value:"FAQ",id:"faq",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"tuyaopen-compilation-process-detailed-guide",children:"TuyaOpen Compilation Process Detailed Guide"})}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsxs)(n.p,{children:["This document provides a detailed introduction to the compilation process of the ",(0,l.jsx)(n.code,{children:"TuyaOpen"})," project, from executing the ",(0,l.jsx)(n.code,{children:"tos.py build"})," command to the complete process of generating binary files."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"TuyaOpen"})," uses Python scripts to coordinate CMake/Ninja build tools, supporting multi-platform and multi-configuration compilation."]}),"\n",(0,l.jsx)(n.h2,{id:"compilation-process-architecture",children:"Compilation Process Architecture"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"tos.py build\n    \u2502\n    \u251c\u2500\u2500 Environment Check\n    \u251c\u2500\u2500 Configuration Initialization\n    \u251c\u2500\u2500 Platform Download\n    \u251c\u2500\u2500 Platform Preparation\n    \u251c\u2500\u2500 Build Setup\n    \u251c\u2500\u2500 CMake Configuration\n    \u251c\u2500\u2500 Ninja Build\n    \u2514\u2500\u2500 Output Validation\n"})}),"\n",(0,l.jsx)(n.h2,{id:"process-description",children:"Process Description"}),"\n",(0,l.jsx)(n.h3,{id:"1-config-command-execution-cli_configpy",children:"1. Config Command Execution (cli_config.py)"}),"\n",(0,l.jsxs)(n.p,{children:["When the user executes the ",(0,l.jsx)(n.code,{children:"tos.py config choice"})," command:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"File Replacement"})}),"\n",(0,l.jsxs)(n.p,{children:["Replace the default ",(0,l.jsx)(n.code,{children:"app_default.config"})," file with the user-selected configuration file."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Generate CatalogKconfig"})}),"\n",(0,l.jsxs)(n.p,{children:["Generate the ",(0,l.jsx)(n.code,{children:"CatalogKconfig"})," file in the ",(0,l.jsx)(n.code,{children:".build/cache/"})," directory, containing all Kconfig configuration files."]}),"\n",(0,l.jsxs)(n.p,{children:["Mainly includes ",(0,l.jsx)(n.code,{children:"<project>/Kconfig"}),", ",(0,l.jsx)(n.code,{children:"src/Kconfig"}),", and ",(0,l.jsx)(n.code,{children:"boards/Kconfig"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Generate using.config File"})}),"\n",(0,l.jsxs)(n.p,{children:["Based on the configuration options provided by ",(0,l.jsx)(n.code,{children:"CatalogKconfig"})," and the configuration results provided by the ",(0,l.jsx)(n.code,{children:"app_default.config"})," file."]}),"\n",(0,l.jsxs)(n.p,{children:["Generate the ",(0,l.jsx)(n.code,{children:".build/cache/using.config"})," file."]}),"\n",(0,l.jsx)(n.p,{children:"This file contains not only all user-selected code-related configuration information but also some compilation-related data, such as project name, version, platform, development board, etc."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"2-build-command-execution-cli_buildpy",children:"2. Build Command Execution (cli_build.py)"}),"\n",(0,l.jsxs)(n.p,{children:["Related logic can be found in the file: ",(0,l.jsx)(n.code,{children:"tools/cli_command/cli_build.py"})]}),"\n",(0,l.jsx)(n.h4,{id:"21-environment-check",children:"2.1 Environment Check"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def env_check():\n    ...\n"})}),"\n",(0,l.jsx)(n.p,{children:"Equivalent command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"git submodule update --init\n"})}),"\n",(0,l.jsx)(n.p,{children:"Ensure all dependent submodules are properly updated."}),"\n",(0,l.jsx)(n.h4,{id:"22-configuration-initialization",children:"2.2 Configuration Initialization"}),"\n",(0,l.jsxs)(n.p,{children:["Generate the ",(0,l.jsx)(n.code,{children:".build/cache/using.config"})," file"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"init_using_config(force=False)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Main configuration items required for compilation include:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"CONFIG_PROJECT_NAME"}),": Project name"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"CONFIG_PLATFORM_CHOICE"}),": Platform selection"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"CONFIG_CHIP_CHOICE"}),": Chip model"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"CONFIG_BOARD_CHOICE"}),": Development board model"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"CONFIG_FRAMEWORK_CHOICE"}),": Framework type"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"23-platform-download",children:"2.3 Platform Download"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def download_platform(platform):\n    ...\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Based on the project configuration information and git information provided by the ",(0,l.jsx)(n.code,{children:"platform/platform_config.yaml"})," file, download the corresponding hardware platform code."]}),"\n",(0,l.jsxs)(n.p,{children:["Platform code is stored in the ",(0,l.jsx)(n.code,{children:"platform/"})," directory."]}),"\n",(0,l.jsx)(n.p,{children:"Equivalent command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"git clone <repository_url> <tuyaopen_root>/platform/<platform_name>\ncd <tuyaopen_root>/platform/<platform_name>\ngit checkout <commit_hash>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"24-platform-preparation",children:"2.4 Platform Preparation"}),"\n",(0,l.jsxs)(n.p,{children:["If there is a ",(0,l.jsx)(n.code,{children:"platform_prepare.py"})," script in the platform code, execute this script for platform-specific preparation work:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'def prepare_platform(platform, chip=""):\n    ...\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Please complete the required compilation tool downloads in this script, and it is recommended to download the toolchain in the ",(0,l.jsx)(n.code,{children:"platform/tools"})," directory."]}),"\n",(0,l.jsx)(n.p,{children:"Preparation work needed before compilation, such as configuration file updates, parameter settings, etc., can also be implemented in this script."}),"\n",(0,l.jsx)(n.p,{children:"Equivalent command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"python <tuyaopen_root>/platform/<platform_name>/platform_prepare.py $CHIP\n"})}),"\n",(0,l.jsx)(n.h4,{id:"25-build-setup",children:"2.5 Build Setup"}),"\n",(0,l.jsxs)(n.p,{children:["If there is a ",(0,l.jsx)(n.code,{children:"build_setup.py"})," script in the platform code, execute this script for build setup:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'def build_setup(platform, project_name, framework, chip=""):\n    ...\n'})}),"\n",(0,l.jsxs)(n.p,{children:["The purpose of this script is the same as the ",(0,l.jsx)(n.code,{children:"platform_prepare.py"}),' mentioned in "2.4 Platform Preparation", and the execution timing is also the same.']}),"\n",(0,l.jsx)(n.p,{children:"Therefore, only one of them needs to exist."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.em,{children:"Note: Due to some historical reasons in TuyaOpen's development, both scripts may take effect simultaneously"})}),"\n",(0,l.jsx)(n.p,{children:"Equivalent command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"python <tuyaopen_root>/platform/<platform_name>/build_setup.py $PROJ_NAME $PLATFORM $FRAMEWORK $CHIP\n"})}),"\n",(0,l.jsx)(n.h4,{id:"26-cmake-configuration",children:"2.6 CMake Configuration"}),"\n",(0,l.jsx)(n.p,{children:"Generate CMake build files:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def cmake_configure(using_data, verbose=False):\n    ...\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"TuyaOpen"})," uses the CMake build system, with configuration files located in the ",(0,l.jsx)(n.code,{children:"<tuyaopen_root>/CMakeLists.txt"})," file."]}),"\n",(0,l.jsx)(n.p,{children:"Main build steps are described later."}),"\n",(0,l.jsx)(n.p,{children:"Equivalent command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"mkdir <project_root>/.build\ncd <project_root>/.build\ncmake -G Ninja $CMAKE_VERBOSE $OPEN_SDK_ROOT -DTOS_PROJECT_NAME=$PROJ -DTOS_PROJECT_ROOT=$PROJECT_ROOT -DTOS_PROJECT_PLATFORM=$PROJECT_PLATFORM -DTOS_FRAMEWORK=$PROJECT_FRAMEWORK -DTOS_PROJECT_CHIP=$PROJECT_CHIP -DTOS_PROJECT_BOARD=$PROJECT_BOARD\n"})}),"\n",(0,l.jsx)(n.h4,{id:"27-ninja-build",children:"2.7 Ninja Build"}),"\n",(0,l.jsx)(n.p,{children:"Execute the actual compilation process:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def ninja_build(build_path, verbose=False):\n    ...\n"})}),"\n",(0,l.jsx)(n.p,{children:"Equivalent command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"cd <project_root>/.build\nninja example\n"})}),"\n",(0,l.jsx)(n.h4,{id:"28-output-validation",children:"2.8 Output Validation"}),"\n",(0,l.jsx)(n.p,{children:"After compilation, verify that the generated binary files meet expectations:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def check_bin_file(using_data):\n    ...\n"})}),"\n",(0,l.jsx)(n.h3,{id:"3-cmake-build-system-cmakeliststxt",children:"3. CMake Build System (CMakeLists.txt)"}),"\n",(0,l.jsx)(n.p,{children:"The main CMakeLists.txt file is responsible for the build configuration of the entire project:"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"<tuyaopen_root>/CMakeLists.txt"})}),"\n",(0,l.jsx)(n.h4,{id:"31-kconfig-configuration-system",children:"3.1 Kconfig Configuration System"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Use Kconfig to manage configuration options"}),"\n",(0,l.jsxs)(n.li,{children:["Include ",(0,l.jsx)(n.code,{children:"using.cmake"})," configuration"]}),"\n",(0,l.jsxs)(n.li,{children:["Generate ",(0,l.jsx)(n.code,{children:"tuya_kconfig.h"})," header file"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"32-toolchain-configuration",children:"3.2 Toolchain Configuration"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cmake",children:'include("${PLATFORM_PATH}/toolchain_file.cmake")\n'})}),"\n",(0,l.jsx)(n.p,{children:"Configure the specific location of the cross-compilation toolchain and common compilation options."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cmake",children:'include("${PLATFORM_PATH}/platform_config.cmake")\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Configure header file paths used by the application layer. According to ",(0,l.jsx)(n.code,{children:"TuyaOpen"}),"'s cross-platform design, it should only include header file paths related to ",(0,l.jsx)(n.code,{children:"tuyaos_adapter"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"33-component-compilation",children:"3.3 Component Compilation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cmake",children:'# Compile all components in the src/ directory\nlist_components(COMPONENT_LIST "${TOP_SOURCE_DIR}/src")\nforeach(comp ${COMPONENT_LIST})\n    add_subdirectory("${TOP_SOURCE_DIR}/src/${comp}")\nendforeach(comp)\n\n# Compile board-level code\nif(EXISTS "${TOP_SOURCE_DIR}/boards/${TOS_PROJECT_PLATFORM}/${TOS_PROJECT_BOARD}/CMakeLists.txt")\n    add_subdirectory("${TOP_SOURCE_DIR}/boards/${TOS_PROJECT_PLATFORM}/${TOS_PROJECT_BOARD}")\nendif()\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Each component can be configured for compilation through the ",(0,l.jsx)(n.code,{children:"src/<component_name>/CMakeLists.txt"})," file."]}),"\n",(0,l.jsxs)(n.p,{children:["Board-level code is configured for compilation through the ",(0,l.jsx)(n.code,{children:"boards/<platform>/<board>/CMakeLists.txt"})," file."]}),"\n",(0,l.jsxs)(n.p,{children:["Output: ",(0,l.jsx)(n.code,{children:"lib<component_name>.a"})]}),"\n",(0,l.jsx)(n.h4,{id:"34-library-file-generation",children:"3.4 Library File Generation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cmake",children:"# Generate tuyaos static library containing all components\nadd_library(${COMPONENTS_ALL_LIB} STATIC ${all_need})\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Output: ",(0,l.jsx)(n.code,{children:"libtuyaos.a"}),", a static library containing all components."]}),"\n",(0,l.jsx)(n.h4,{id:"35-application-compilation",children:"3.5 Application Compilation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cmake",children:'# Compile application code\nset(EXAMPLE_LIB "tuyaapp")\ninclude(${TOS_PROJECT_ROOT}/CMakeLists.txt)\ntarget_link_libraries(${EXAMPLE_LIB} ${COMPONENTS_ALL_LIB})\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Application code is configured for compilation through the ",(0,l.jsx)(n.code,{children:"<project_root>/CMakeLists.txt"})," file."]}),"\n",(0,l.jsxs)(n.p,{children:["Output: ",(0,l.jsx)(n.code,{children:"libtuyaapp.a"})]}),"\n",(0,l.jsx)(n.h4,{id:"36-platform-build",children:"3.6 Platform Build"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cmake",children:'# Call platform-specific build script\nif(EXISTS "${TOP_SOURCE_DIR}/platform/${TOS_PROJECT_PLATFORM}/build_example.py")\n    set(BUILD_COMMAND python -u ./build_example.py)\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Since ",(0,l.jsx)(n.code,{children:"TuyaOpen"})," supports multi-platform compilation, all platform-specific compilation logic can be implemented through the ",(0,l.jsx)(n.code,{children:"platform/<platform_name>/build_example.py"})," file."]}),"\n",(0,l.jsxs)(n.p,{children:["For the main purpose of the script, refer to: ",(0,l.jsx)(n.a,{href:"/docs/new-hardware/new-platform#build-and-link",children:"build_example.py"})]}),"\n",(0,l.jsx)(n.h3,{id:"4-key-files-and-directory-structure",children:"4. Key Files and Directory Structure"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"TuyaOpen/\n\u251c\u2500\u2500 tos.py                    # Main entry script\n\u251c\u2500\u2500 tools/\n\u2502   \u251c\u2500\u2500 cli_command/         # CLI command implementation\n\u2502   \u2502   \u251c\u2500\u2500 cli_build.py     # build command implementation\n\u2502   \u2502   \u251c\u2500\u2500 cli_config.py    # config command implementation\n\u2502   \u2502   \u251c\u2500\u2500 util.py          # Utility functions\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 cmake/               # CMake related files\n\u2502   \u2514\u2500\u2500 kconfiglib/          # Kconfig tools\n\u251c\u2500\u2500 platform/                # Platform code directory\n\u2502   \u251c\u2500\u2500 platform_config.yaml # Platform configuration\n\u2502   \u2514\u2500\u2500 [platform_name]/     # Specific platforms\n\u251c\u2500\u2500 src/                     # Source code components\n\u251c\u2500\u2500 boards/                  # Board support packages\n\u2514\u2500\u2500 [project]/              # User project directory\n    \u251c\u2500\u2500 CMakeLists.txt      # Project CMake file\n    \u251c\u2500\u2500 app_default.config  # Default configuration\n    \u2514\u2500\u2500 .build/             # Build output directory\n        \u251c\u2500\u2500 bin/            # Binary files\n        \u251c\u2500\u2500 lib/            # Library files\n        \u2514\u2500\u2500 cache/          # Configuration cache\n"})}),"\n",(0,l.jsx)(n.h3,{id:"5-compilation-output",children:"5. Compilation Output"}),"\n",(0,l.jsx)(n.p,{children:"After successful compilation, files will be generated in the following locations:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Binary files"}),": ",(0,l.jsx)(n.code,{children:".build/bin/{app_name}_QIO_{version}.bin"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Library files"}),": ",(0,l.jsx)(n.code,{children:".build/lib/"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Build parameters"}),": ",(0,l.jsx)(n.code,{children:".build/build/build_param"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Output information example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"====================[ BUILD SUCCESS ]===================\n Target    : example_QIO_1.0.0.bin\n Output    : /path/to/project/.build/bin\n Platform  : T2\n Chip      : T2-U\n Board     : t2_evb\n Framework : base\n========================================================\n"})}),"\n",(0,l.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,l.jsx)(n.p,{children:"TuyaOpen's build system coordinates CMake/Ninja build tools through Python scripts, achieving:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Multi-platform support"}),": Support for different hardware platforms through platform abstraction layer"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Configuration management"}),": Use Kconfig system to manage configuration options"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Modular design"}),": Component-based source code structure"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Automated build"}),": One-click compilation, automatic dependency handling"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The entire process is clearly designed, easy to extend and maintain, suitable for cross-platform development of IoT devices."}),"\n",(0,l.jsx)(n.h2,{id:"faq",children:"FAQ"})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);