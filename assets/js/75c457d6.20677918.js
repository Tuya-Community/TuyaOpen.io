"use strict";(self.webpackChunktuyaopen_io_website=self.webpackChunktuyaopen_io_website||[]).push([[2900],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var t=r(96540);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},85145:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tkl-api/tkl_semaphore","title":"tkl_semaphore | Semaphore","description":"The file tkl_semaphore.c is used for creating and managing semaphores to implement task synchronization or event notification between tasks in embedded systems or multi-tasking operating systems. This file provides interfaces for creating semaphores, waiting on semaphores, posting to semaphores, and releasing semaphores. The file is also auto-generated by the TuyaOS and reserves areas for developers to implement their code.","source":"@site/docs/tkl-api/tkl_semaphore.md","sourceDirName":"tkl-api","slug":"/tkl-api/tkl_semaphore","permalink":"/docs/tkl-api/tkl_semaphore","draft":false,"unlisted":false,"editUrl":"https://github.com/Tuya-Community/TuyaOpen.io/edit/master/docs/tkl-api/tkl_semaphore.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"tkl_mutex | Mutex Lock","permalink":"/docs/tkl-api/tkl_mutex"},"next":{"title":"tkl_system | System Interface","permalink":"/docs/tkl-api/tkl_system"}}');var s=r(74848),a=r(28453);const i={},l="tkl_semaphore | Semaphore",o={},c=[{value:"API Description",id:"api-description",level:2},{value:"tkl_semaphore_create_init",id:"tkl_semaphore_create_init",level:3},{value:"Function",id:"function",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Return Value",id:"return-value",level:4},{value:"tkl_semaphore_wait",id:"tkl_semaphore_wait",level:3},{value:"Function",id:"function-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Return Value",id:"return-value-1",level:4},{value:"tkl_semaphore_post",id:"tkl_semaphore_post",level:3},{value:"Function",id:"function-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Return Value",id:"return-value-2",level:4},{value:"tkl_semaphore_release",id:"tkl_semaphore_release",level:3},{value:"Function",id:"function-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Return Value",id:"return-value-3",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"tkl_semaphore--semaphore",children:"tkl_semaphore | Semaphore"})}),"\n",(0,s.jsxs)(n.p,{children:["The file ",(0,s.jsx)(n.code,{children:"tkl_semaphore.c"})," is used for creating and managing semaphores to implement task synchronization or event notification between tasks in embedded systems or multi-tasking operating systems. This file provides interfaces for creating semaphores, waiting on semaphores, posting to semaphores, and releasing semaphores. The file is also auto-generated by the TuyaOS and reserves areas for developers to implement their code."]}),"\n",(0,s.jsx)(n.h2,{id:"api-description",children:"API Description"}),"\n",(0,s.jsx)(n.h3,{id:"tkl_semaphore_create_init",children:"tkl_semaphore_create_init"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"OPERATE_RET tkl_semaphore_create_init(TKL_SEM_HANDLE *handle, uint32_t sem_cnt, uint32_t sem_max);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"function",children:"Function"}),"\n",(0,s.jsx)(n.p,{children:"Create and initialize a counting semaphore."}),"\n",(0,s.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"handle"}),": Output parameter to receive the created semaphore handle."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sem_cnt"}),": The initial count of the semaphore."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sem_max"}),": The maximum count of the semaphore."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsxs)(n.p,{children:["A return value of ",(0,s.jsx)(n.code,{children:"OPRT_OK"})," indicates that the semaphore was successfully created, other return values indicate an error. See ",(0,s.jsx)(n.code,{children:"tuya_error_code.h"})," for specific error codes."]}),"\n",(0,s.jsx)(n.h3,{id:"tkl_semaphore_wait",children:"tkl_semaphore_wait"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"OPERATE_RET tkl_semaphore_wait(const TKL_SEM_HANDLE handle, uint32_t timeout);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"function-1",children:"Function"}),"\n",(0,s.jsx)(n.p,{children:"Wait for a semaphore."}),"\n",(0,s.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"handle"}),": Semaphore handle."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"timeout"}),": Timeout duration for waiting, in milliseconds. ",(0,s.jsx)(n.code,{children:"TKL_SEM_WAIT_FOREVER"})," indicates to wait indefinitely until the semaphore is obtained."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"return-value-1",children:"Return Value"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"OPRT_OK"})," indicates that the semaphore was successfully obtained, ",(0,s.jsx)(n.code,{children:"OPRT_OS_ADAPTER_SEM_WAIT_TIMEOUT"})," indicates a timeout occurred, other return values indicate an error. See ",(0,s.jsx)(n.code,{children:"tuya_error_code.h"})," for specific error codes."]}),"\n",(0,s.jsx)(n.h3,{id:"tkl_semaphore_post",children:"tkl_semaphore_post"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"OPERATE_RET tkl_semaphore_post(const TKL_SEM_HANDLE handle);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"function-2",children:"Function"}),"\n",(0,s.jsx)(n.p,{children:"Post (release) a semaphore, incrementing the semaphore's count."}),"\n",(0,s.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"handle"}),": Semaphore handle."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"return-value-2",children:"Return Value"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"OPRT_OK"})," indicates that the semaphore was successfully posted, other return values indicate an error. Detailed error codes can be queried in ",(0,s.jsx)(n.code,{children:"tuya_error_code.h"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"tkl_semaphore_release",children:"tkl_semaphore_release"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"OPERATE_RET tkl_semaphore_release(const TKL_SEM_HANDLE handle);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"function-3",children:"Function"}),"\n",(0,s.jsx)(n.p,{children:"Release and delete a semaphore."}),"\n",(0,s.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"handle"}),": Semaphore handle."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"return-value-3",children:"Return Value"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"OPRT_OK"})," indicates that the resources were successfully released, other return values indicate an error. Detailed information can be obtained from ",(0,s.jsx)(n.code,{children:"tuya_error_code.h"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);